" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

"Use pathogen
execute pathogen#infect()

" Enable backspace to function as expected
set backspace=indent,eol,start

"Map <ESC> to the key sequence jj
imap jj <Esc>

" Map Ctrl+C to "*y in Windows
vnoremap <C-c> "*yy

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

"Basic settings for Vim (THIS IS OLD STUFF)
"syntax on
"set number
"filetype indent plugin on
"set modeline
"set hlsearch
"set tabstop=4
"set expandtab
"set shiftwidth=4
"set softtabstop=4

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

"Font
set guifont=Consolas:h10:cANSI

" Set colors to 256
set t_Co=256

" Change Colorscheme
" colorscheme sourcerer
colorscheme up

" Special Highlighting
syn keyword myTodo contained TODO: FIXME:
au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
autocmd BufNewFile,BufRead *.ertf set syntax=xml

" Compile and run Python
if has("win32")
  "Windows options here
	autocmd FileType python nnoremap <buffer> <F9> :exec '!py3' shellescape(@%, 1)<cr>
	let g:syntastic_python_python_exec = 'C:\Python34\python.exe'
	noremap <C-j> :%!py -m json.tool<cr>

else
  if has("unix")
    let s:uname = system("uname")
    if s:uname == "Darwin\n"
      "Mac options here
	autocmd FileType python nnoremap <buffer> <F9> :exec '!python3' shellescape(@%, 1)<cr>
	" Syntastic Python 3 location
	let g:syntastic_python_python_exec = '/Library/Frameworks/Python.framework/Versions/3.4/bin/python3'
	noremap <C-j> :%!python -m json.tool<cr>
    endif
  endif
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Syntastic Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_use_codec = 1

" Easy Notes Settings
let g:notes_directories = ['~/Documents/Notes', '~/Documents/Notes/QAN Investigation', '~/Documents/Notes/PQA', '~/Documents/Notes/research', '~/Documents/Notes/design_review']

